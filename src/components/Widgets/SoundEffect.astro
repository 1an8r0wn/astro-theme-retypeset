<script is:inline>
class AudioManager {
  constructor() {
    this.audioContext = null
    this.audioBuffers = new Map()
    this.isReady = false
    this.isInitializing = false
  }

  async initialize() {
    if (this.isReady || this.isInitializing) {
      return
    }

    this.isInitializing = true
    try {
      this.audioContext = new (window.AudioContext || window.webkitAudioContext)()
      await this.preloadSounds()
      this.isReady = true
    }
    catch (error) {
      console.warn('Audio initialization failed:', error)
    }
    finally {
      this.isInitializing = false
    }
  }

  async preloadSounds() {
    const promises = Array.from({ length: 5 }, (_, i) =>
      this.loadSound(`tap_0${i + 1}`, `/sounds/tap_0${i + 1}.wav`))
    await Promise.allSettled(promises)
  }

  async loadSound(name, url) {
    try {
      const response = await fetch(url)
      const arrayBuffer = await response.arrayBuffer()
      const audioBuffer = await this.audioContext.decodeAudioData(arrayBuffer)
      this.audioBuffers.set(name, audioBuffer)
    }
    catch (error) {
      console.warn(`Failed to load ${name}:`, error)
    }
  }

  async playRandomTapSound() {
    if (!this.isReady) {
      await this.initialize()
    }

    if (this.audioBuffers.size === 0)
      return

    try {
      if (this.audioContext.state === 'suspended') {
        await this.audioContext.resume()
      }

      const availableBuffers = Array.from(this.audioBuffers.values())
      const randomIndex = Math.floor(Math.random() * availableBuffers.length)
      const audioBuffer = availableBuffers[randomIndex]

      const source = this.audioContext.createBufferSource()
      source.buffer = audioBuffer
      source.connect(this.audioContext.destination)
      source.start(0)
    }
    catch (error) {
      console.warn('Playback failed:', error)
    }
  }
}

const audioManager = new AudioManager()

function handleSoundClick(event) {
  if (window.matchMedia('(max-width: 1023px)').matches) {
    return
  }

  const target = event.target.closest(`
    #language-switcher,
    #theme-toggle-button,
    #back-button,
    #toc-desktop-icon
  `)

  if (target) {
    audioManager.playRandomTapSound().catch(() => {})
  }
}

function setupAudioSystem() {
  document.removeEventListener('click', handleSoundClick)
  document.addEventListener('click', handleSoundClick)
}

setupAudioSystem()
document.addEventListener('astro:page-load', setupAudioSystem)
</script>
