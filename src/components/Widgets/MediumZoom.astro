<script>
// 全局变量
let overlay: HTMLDivElement | null = document.querySelector('.zoom-overlay')
let zoomedImg: HTMLImageElement | null = null
let originalImg: HTMLImageElement | null = null

// 初始化遮罩层
if (!overlay) {
  overlay = document.createElement('div')
  overlay.classList.add('zoom-overlay')
  overlay.style.position = 'fixed'
  overlay.style.top = '0'
  overlay.style.left = '0'
  overlay.style.width = '100%'
  overlay.style.height = '100%'
  overlay.style.backgroundColor = 'rgba(255, 255, 255, 0.95)'
  overlay.style.opacity = '0'
  overlay.style.transition = 'opacity 300ms ease'
  overlay.style.zIndex = '999'
  overlay.style.display = 'none'
  document.body.appendChild(overlay)
}

// 设置图片样式和光标
function setupImageZoom() {
  // 为所有图片添加鼠标样式
  document.querySelectorAll('img').forEach((img) => {
    img.style.cursor = 'zoom-in'
  })
}

// 关闭放大的图片
function closeZoom() {
  if (!zoomedImg || !originalImg)
    return

  // 重置图片样式，开始动画
  zoomedImg.style.transform = ''
  if (overlay)
    overlay.style.opacity = '0'

  // 动画结束后清理
  setTimeout(() => {
    // 移除放大图片
    if (zoomedImg && zoomedImg.parentNode) {
      document.body.removeChild(zoomedImg)
    }
    zoomedImg = null

    // 隐藏遮罩
    if (overlay)
      overlay.style.display = 'none'

    // 恢复原图可见
    if (originalImg) {
      originalImg.style.visibility = 'visible'
    }
    originalImg = null
  }, 300) // 与transition时间匹配
}

// 处理点击图片放大
function handleImageClick(event: MouseEvent) {
  // 如果已经有放大的图片，则关闭它
  if (zoomedImg) {
    closeZoom()
    return
  }

  // 检查点击的是否为图片
  const target = event.target as HTMLElement
  if (target.tagName !== 'IMG')
    return

  const img = target as HTMLImageElement
  event.preventDefault()

  // 获取原始图片的位置和尺寸
  const rect = img.getBoundingClientRect()

  // 记录原始图片
  originalImg = img

  // 创建并显示放大的图片
  zoomedImg = img.cloneNode() as HTMLImageElement
  zoomedImg.style.position = 'fixed'
  zoomedImg.style.top = `${rect.top}px`
  zoomedImg.style.left = `${rect.left}px`
  zoomedImg.style.width = `${rect.width}px`
  zoomedImg.style.height = `${rect.height}px`
  zoomedImg.style.transition = 'transform 300ms cubic-bezier(0.2, 0, 0.2, 1)'
  zoomedImg.style.zIndex = '1000'
  zoomedImg.style.cursor = 'zoom-out'

  // 添加遮罩和克隆图片到body
  if (overlay) {
    document.body.appendChild(overlay)
    document.body.appendChild(zoomedImg)

    // 显示遮罩并设置动画
    overlay.style.display = 'block'
  }

  // 计算放大后的位置和比例
  const viewportWidth = window.innerWidth
  const viewportHeight = window.innerHeight

  // 计算缩放比例，保持原始宽高比
  const scaleX = (viewportWidth * 0.8) / rect.width
  const scaleY = (viewportHeight * 0.8) / rect.height
  const scale = Math.min(scaleX, scaleY) // 选择较小的缩放因子以确保完全适应视口

  // 计算居中位置
  const translateX = (-rect.left + (viewportWidth - rect.width) / 2) / scale
  const translateY = (-rect.top + (viewportHeight - rect.height) / 2) / scale

  // 触发回流并开始动画
  setTimeout(() => {
    if (overlay)
      overlay.style.opacity = '1'
    if (zoomedImg)
      zoomedImg.style.transform = `scale(${scale}) translate3d(${translateX}px, ${translateY}px, 0)`
  }, 10)

  // 隐藏原图
  originalImg.style.visibility = 'hidden'
}

// 处理放大图片点击关闭
function handleZoomedImageClick(event: MouseEvent) {
  if (!zoomedImg)
    return

  const target = event.target as HTMLElement
  if (target === zoomedImg) {
    event.preventDefault()
    event.stopPropagation() // 防止事件冒泡到document
    closeZoom()
  }
}

// 处理遮罩层点击关闭
function handleOverlayClick() {
  if (zoomedImg) {
    closeZoom()
  }
}

// 全局添加事件监听器（只会执行一次）
document.addEventListener('click', handleImageClick)
document.addEventListener('click', handleZoomedImageClick)
if (overlay)
  overlay.addEventListener('click', handleOverlayClick)

// 监听页面内容变化，更新所有图片的光标样式
document.addEventListener('astro:page-load', setupImageZoom)

// 确保首次加载时也能正常工作
setupImageZoom()
</script>
