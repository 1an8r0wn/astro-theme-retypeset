<script>
async function loadCardData(card: HTMLElement) {
  const repo = card.dataset.repo
  if (!repo) {
    return
  }

  const avatarEl = card.getElementsByClassName('gc-owner-avatar')[0] as HTMLElement
  const descEl = card.getElementsByClassName('gc-repo-description')[0] as HTMLElement
  const starsEl = card.getElementsByClassName('gc-stars-count')[0] as HTMLElement
  const forksEl = card.getElementsByClassName('gc-forks-count')[0] as HTMLElement
  const licenseEl = card.getElementsByClassName('gc-license-info')[0] as HTMLElement

  function updateCardUI(data: any) {
    const numberFormat = new Intl.NumberFormat('en', { notation: 'compact', maximumFractionDigits: 1 })

    if (avatarEl && data.owner?.avatar_url) {
      avatarEl.style.backgroundImage = `url(${data.owner.avatar_url})`
    }

    if (descEl) {
      descEl.textContent = data.description ?? 'No description'
    }

    if (starsEl) {
      starsEl.textContent = numberFormat.format(data.stargazers_count ?? 0)
    }

    if (forksEl) {
      forksEl.textContent = numberFormat.format(data.forks_count ?? 0)
    }

    if (licenseEl) {
      licenseEl.textContent = data.license?.spdx_id ?? 'No License'
    }
  }

  const cacheKey = `github-repo-${repo}`
  const cached = sessionStorage.getItem(cacheKey)

  if (!cached) {
    try {
      const response = await fetch(`https://api.github.com/repos/${repo}`)

      if (!response.ok) {
        if (descEl) {
          const errorMessage = response.status === 404 ? 'Repository not found' : 'Failed to load repository data'
          descEl.textContent = errorMessage
        }
        return
      }

      const data = await response.json()

      sessionStorage.setItem(cacheKey, JSON.stringify(data))
      updateCardUI(data)
    }
    catch (error) {
      console.error(`Failed to fetch ${repo}:`, error)
    }
  }
  else {
    const data = JSON.parse(cached)
    updateCardUI(data)
  }
}

function setupGithubCards() {
  const githubCards = document.getElementsByClassName('gc-container')
  if (githubCards.length === 0) {
    return
  }

  Array.from(githubCards).forEach((card) => {
    loadCardData(card as HTMLElement)
  })
}

document.addEventListener('astro:page-load', setupGithubCards)
setupGithubCards()
</script>
