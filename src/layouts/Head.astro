---
import themeConfig from '@/config'
import { ClientRouter } from 'astro:transitions'

interface Props {
  postTitle?: string
  postDescription?: string
  postImage?: string
}

const { postTitle, postDescription, postImage } = Astro.props
const { title, subtitle, description, author, url, favicon } = themeConfig.site
const { light: { background: lightMode }, dark: { background: darkMode } } = themeConfig.color
const { locale, moreLocale } = themeConfig.global
const { verification = {}, twitterID = '', googleAnalyticsID = '', umamiAnalyticsID = '' } = themeConfig.seo ?? {}
const { google = '', bing = '', yandex = '', baidu = '' } = verification
const { commentURL = '', imageHostURL = '', customGoogleAnalyticsURL = '', customUmamiAnalyticsURL = '', customUmamiAnalyticsJS = '' } = themeConfig.preload
---

<head>
<!-- Basic info -->
<meta charset="utf-8" />
<meta name="viewport" content="width=device-width, initial-scale=1, viewport-fit=cover" />
{favicon.toLowerCase().endsWith('.webp') && <link rel="icon" type="image/webp" href={favicon} />}
{favicon.toLowerCase().endsWith('.svg') && <link rel="icon" type="image/svg+xml" href={favicon} />}
{favicon.toLowerCase().endsWith('.png') && <link rel="icon" type="image/png" href={favicon} />}
<title>{postTitle ? `${postTitle} | ${title}` : `${title} - ${subtitle}`}</title>
<meta name="description" content={postDescription || description} />
<meta name="author" content={author} />
<meta name="generator" content={Astro.generator} />
<meta name="theme-color" content={lightMode} />
<ClientRouter fallback="swap" />

<!-- Preload -->
{commentURL && <link rel="dns-prefetch" href={commentURL} />}
{imageHostURL && <link rel="dns-prefetch" href={imageHostURL} />}
{customGoogleAnalyticsURL && <link rel="dns-prefetch" href={customGoogleAnalyticsURL} />}
{customUmamiAnalyticsURL && <link rel="dns-prefetch" href={customUmamiAnalyticsURL} />}
<link rel="alternate" href="/rss.xml" type="application/rss+xml" title="RSS" />
<link rel="canonical" href={Astro.url} />

<!-- i18n hreflang generate -->
{[locale, ...moreLocale].map(lang => (
  <link
    rel="alternate"
    href={`${url}${lang === locale ? '' : lang}`}
    hreflang={lang === 'zh-tw' ? 'zh-TW' : lang}
  />
))}

<!-- Facebook Open Graph -->
<meta property="og:title" content={postTitle || title} />
<meta property="og:type" content={postTitle ? 'article' : 'website'} />
<meta property="og:image" content={postImage || favicon} />
<meta property="og:url" content={Astro.url} />
<meta property="og:description" content={postDescription || subtitle} />
<meta property="og:site_name" content={title} />

<!-- Twitter Card -->
<meta name="twitter:card" content="summary" />
<meta name="twitter:title" content={postTitle || title} />
<meta name="twitter:description" content={postDescription || subtitle} />
<meta name="twitter:image" content={postImage || favicon} />
{twitterID && (
  <>
    <meta name="twitter:site" content={twitterID} />
    <meta name="twitter:creator" content={twitterID} />
  </>
)}

<!-- Site Verification -->
{google && <meta name="google-site-verification" content={google} />}
{bing && <meta name="msvalidate.01" content={bing} />}
{yandex && <meta name="yandex-verification" content={yandex} />}
{baidu && <meta name="baidu-site-verification" content={baidu} />}

<!-- Theme Toggle -->
<script is:inline define:vars={{ defaultMode: themeConfig.color.mode, lightMode, darkMode }}>
// Initialize theme
function initTheme() {
  const theme = (() => {
    const currentTheme = localStorage.getItem('theme')
    // First priority: theme from localStorage
    if (currentTheme)
      return currentTheme
    // Second priority: user configured default theme
    if (defaultMode)
      return defaultMode
    // Last priority: follow system theme
    return window.matchMedia('(prefers-color-scheme: dark)').matches
      ? 'dark'
      : 'light'
  })()
  // Update website theme
  const isDark = theme === 'dark'
  document.documentElement.classList.toggle('dark', isDark)
  // Update meta theme color
  const metaTheme = document.querySelector('meta[name="theme-color"]')
  if (metaTheme) {
    metaTheme.setAttribute('content', isDark ? darkMode : lightMode)
  }
}

// Update theme
function updateTheme() {
  // Read theme from localStorage
  const isDark = localStorage.getItem('theme') === 'dark'
  // Set theme directly instead of toggling
  document.documentElement.classList.toggle('dark', isDark)
  const metaTheme = document.querySelector('meta[name="theme-color"]')
  if (metaTheme) {
    metaTheme.setAttribute('content', isDark ? darkMode : lightMode)
  }
}

// Listen to system theme changes in real-time
window
  .matchMedia('(prefers-color-scheme: dark)')
  .addEventListener('change', ({ matches: isDark }) => {
    localStorage.setItem('theme', isDark ? 'dark' : 'light')
    updateTheme()
  })

// Initialize theme (on first load or page transition)
document.addEventListener('astro:after-swap', initTheme)
initTheme()
</script>

<!-- Google Analytics -->
{
  googleAnalyticsID && (
    <>
      <script
        type="text/partytown"
        crossorigin="anonymous"
        src={`${customGoogleAnalyticsURL || 'https://www.googletagmanager.com'}/gtag/js?id=${googleAnalyticsID}`}
      />
      <script
        type="text/partytown"
        define:vars={{ googleAnalyticsID, customGoogleAnalyticsURL }}
      >
        window.dataLayer = window.dataLayer || []
        function gtag(...args) {
          dataLayer.push(args)
        }
        gtag('js', new Date())
        if (customGoogleAnalyticsURL) {
          gtag('config', googleAnalyticsID, {
            transport_url: customGoogleAnalyticsURL,
          })
        }
        else {
          gtag('config', googleAnalyticsID)
        }
      </script>
    </>
  )
}

<!-- Umami Analytics -->
{
  umamiAnalyticsID && (
    <script
      type="text/partytown"
      crossorigin="anonymous"
      data-website-id={umamiAnalyticsID}
      src={customUmamiAnalyticsJS || 'https://analytics.umami.is/script.js'}
      data-cache="true"
    />
  )
}
</head>
